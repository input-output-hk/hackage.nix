{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  {
    flags = {};
    package = {
      specVersion = "3.4";
      identifier = { name = "ollama-holes-plugin"; version = "0.1.5.2"; };
      license = "MIT";
      copyright = "2025 (c) Matthias Pall Gissurarson  ";
      maintainer = "Matthias Pall Gissurarson <mpg@mpg.is>";
      author = "Matthias Pall Gissurarson <mpg@mpg.is>";
      homepage = "https://github.com/Tritlo/OllamaHoles";
      url = "";
      synopsis = "A typed-hole plugin that uses LLMs to generate valid hole-fits";
      description = "This package provides a GHC plugin that uses LLMs to generate valid hole-fits.\nIt supports multiple backends including Ollama, OpenAI, and Gemini.\n\nThe following flags are available:\n\nTo specify the model to use:\n\n> -fplugin-opt=GHC.Plugin.OllamaHoles:model=<model_name>\n\nTo include documentation in the LLM's context (not recommended for small models):\n\n> -fplugin-opt=GHC.Plugin.OllamaHoles:include-docs\n\nTo specify the backend to use (ollama, openai, or gemini):\n\n> -fplugin-opt=GHC.Plugin.OllamaHoles:backend=<backend_name>\n\nWhen using the openai backend, you can specify a custom base_url, e.g.\n\n> -fplugin-opt=GHC.Plugin.OllamaHoles:openai_base_url=api.groq.com/api \n\nYou can also specify which key to use.\n\n> -fplugin-opt=GHC.Plugin.OllamaHoles:openai_key_name=GROQ_API_KEY \n\nTo specify how many fits to generate (passed to the model)\n\n> -fplugin-opt=GHC.Plugin.OllamaHoles:n=5\n\nTo enable debug output:\n\n> -fplugin-opt=GHC.Plugin.OllamaHoles:debug\n\nFor the Ollama backend, make sure you have the Ollama CLI installed and the model\nyou want to use is available. You can install the Ollama CLI by following the\ninstructions at https://ollama.com/download,\nand you can install the default model (gemma3:27b) by running `ollama pull gemma3:27b`.\n\nFor the OpenAI backend, you'll need to set the OPENAI_API_KEY environment variable with your API key.\n\nFor the Gemini backend, you'll need to set the GEMINI_API_KEY environment variable with your API key.\n\nNote that the speed and quality of the hole-fits generated by the plugin depends on\nthe model you use, and the default model requires a GPU to run efficiently.\nFor a smaller model, we suggest `gemma3:4b-it-qat`, or `deepcoder:1.5b`.";
      buildType = "Simple";
    };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."ghc" or (errorHandler.buildDepError "ghc"))
          (hsPkgs."ollama-haskell" or (errorHandler.buildDepError "ollama-haskell"))
          (hsPkgs."text" or (errorHandler.buildDepError "text"))
          (hsPkgs."req" or (errorHandler.buildDepError "req"))
          (hsPkgs."modern-uri" or (errorHandler.buildDepError "modern-uri"))
          (hsPkgs."aeson" or (errorHandler.buildDepError "aeson"))
          (hsPkgs."exceptions" or (errorHandler.buildDepError "exceptions"))
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
        ];
        buildable = true;
      };
    };
  }