{ system
, compiler
, flags
, pkgs
, hsPkgs
, pkgconfPkgs
, ... }:
  {
    flags = {};
    package = {
      specVersion = "1.2";
      identifier = {
        name = "hurdle";
        version = "0.3.0";
      };
      license = "BSD-3-Clause";
      copyright = "Stephen Tetley <stephen.tetley@gmail.com>";
      maintainer = "Stephen Tetley <stephen.tetley@gmail.com>";
      author = "";
      homepage = "http://code.google.com/p/copperbox/";
      url = "";
      synopsis = "Extract function names from Windows DLLs.";
      description = "Hurdle - (H)askell (U)tilty (R)egarding (DL)l (E)xports.\n\nExtract function names from Windows DLLs a-la pexports.\n\nHurdle has minimal dependencies: base, containers, and\nkangaroo (kangaroo just needs base and array).\n\nCurrently Hurdle also has minimal utility - please consider\npexports instead as Hurdle doesn't yet print ordinals and\nfails on DLLs generated by Visual C++ (which puts function\nsymbols in the .rdata section - gcc uses the .edata section).\n\nHurdle was a Sunday afternoon hack that has taken a good while\nlonger...\n\n\nChange-log\n\n0.2.0 to 0.3.0\n\n* Changes to use kangaroo-0.2.0\n\n0.1.0 to 0.2.0\n\n* Changed to use kangaroo binary parser combinators.\n* Added error message reporting parser failure when\n.edata section is not found.\n";
      buildType = "Simple";
    };
    components = {
      exes = {
        "hurdle" = {
          depends  = [
            (hsPkgs.base)
            (hsPkgs.array)
            (hsPkgs.containers)
            (hsPkgs.kangaroo)
          ];
        };
      };
    };
  }