{ system
, compiler
, flags
, pkgs
, hsPkgs
, pkgconfPkgs
, ... }:
  {
    flags = {};
    package = {
      specVersion = "1.2";
      identifier = {
        name = "wumpus-core";
        version = "0.34.0";
      };
      license = "BSD-3-Clause";
      copyright = "Stephen Tetley <stephen.tetley@gmail.com>";
      maintainer = "Stephen Tetley <stephen.tetley@gmail.com>";
      author = "";
      homepage = "http://code.google.com/p/copperbox/";
      url = "";
      synopsis = "Pure Haskell PostScript and SVG generation.";
      description = "\nWumpus is a low-level library for generating static 2D vector\npictures, its salient feature is portability due to no FFI\ndependencies. It can generate PostScript (EPS) files and SVG\nfiles. The generated PostScript code is plain [1] and reasonably\nefficient as the use of stack operations, i.e @gsave@ and\n@grestore@, is minimized.\n\nPictures in Wumpus are made from /paths/ and text /labels/.\nPaths themselves are made from points. The usual affine\ntransformations (rotations, scaling, translations) can be\napplied to Pictures. Unlike PostScript there is no\nnotion of a current point, Wumpus builds pictures in a\ncoordinate-free style.\n\nGENERAL DRAWBACKS...\n\nFor actually drawing pictures, diagrams, etc. Wumpus is very\nlow level. There is a supplemantary package @wumpus-basic@\navailable that helps create certain types of diagram, but it is\nexperimental - functionality is added and dropped between\nreleases.\n\nSome of the design decisions made for Wumpus-core are not\nsophisticated (e.g. how attributes like colour are handled,\nand how the bounding boxes of text labels are calculated), so\nWumpus might be limited compared to other systems. However,\nthe design permits a fairly simple implementation, which is a\npriority.\n\n\n\\[1\\] Because the output is simple, straight-line PostScript\ncode, it is possible to use GraphicsMagick or a similar tool\nto convert EPS files generated by Wumpus to many other formats\n(bitmaps).\n\nChangelog:\n\n0.33.0 to 0.34.0:\n\n* Clipping paths fixed. Previously they did not work for SVG or\nPostScript.\n\n* @picOver@ fixed. Drawing order was changed in version 0.33.0,\nbut @picOver@ was not updated accordingly (so it actually\nstarted drawing pictures /under/). It now works correctly.\n\n* The lexer for escape characters embedded in label strings has\nbeen rewritten. It now supports octal and hexadecimal codes.\n\n0.32.0 to 0.33.0:\n\n* Major change - reworked support for text encoding. Encoding\nmaps are now linked with fonts - it was spotted that the\nSymbol font does not use the Latin1 names. The @TextEncoder@\ndata type has been changed and there is a new @FontEncoder@\ndata type. There are also new modules for the Symbol Font\nencoder table and for the /Default Encoder/ which\naccommodates both Latin1 and the Symbol font. This has also\nmandated changes to the @FontFace@ data type.\n\n* Major change - the printing order has been changed. The first\nelement in a @frame@ of Prims is draw first. This means it\nappears first in the output file (this makes sense) - it also\nmeans it is at the back in the Z-Order. This latter point\nmight not be so intuitive, but changing the printing order at\nleast makes Wumpus-Core match SVG and PostScript.\n\n* Changed the visiblity of the new colours (yellow, cyan,\nmagenta) to be hidden at the top level. They can be exposed\nby importing @Wumpus.Core.Colour@.\n\n* @Wumpus.Core.FontSize@ - added @spacerWidth@ function.\n\n\n";
      buildType = "Simple";
    };
    components = {
      "library" = {
        depends  = [
          (hsPkgs.base)
          (hsPkgs.containers)
          (hsPkgs.time)
          (hsPkgs.vector-space)
          (hsPkgs.algebra)
        ];
      };
    };
  }