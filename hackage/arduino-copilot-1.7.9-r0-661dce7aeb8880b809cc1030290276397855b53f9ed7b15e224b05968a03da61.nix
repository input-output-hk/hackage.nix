{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  {
    flags = {};
    package = {
      specVersion = "1.10";
      identifier = { name = "arduino-copilot"; version = "1.7.9"; };
      license = "BSD-3-Clause";
      copyright = "2020 Joey Hess";
      maintainer = "Joey Hess <id@joeyh.name>";
      author = "Joey Hess";
      homepage = "";
      url = "";
      synopsis = "Arduino programming in haskell using the Copilot stream DSL";
      description = "arduino-copilot contains the basic building blocks to program your\nArduino Nano, Arduino Uno or compatible hardware using Haskell\nand Functional Reactive Programming (FRP).\n\narduino-copilot uses the Copilot stream DSL (domain-specific language)\nto generate an Arduino sketch, which can be loaded in the Arduino IDE\nand uploaded to the board. Other methods of deploying sketches to the\nArduino, such as the Arduino-Makefile, can also be used with a sketch\ngenerated by arduino-copilot.\n\nAll the messy details are abstracted away, letting you focus on the\ndesired behavior of the Arduino.\n\nCopilot is a stream (i.e., infinite lists) domain-specific language\n(DSL) in Haskell that compiles into embedded C. Copilot contains an\ninterpreter, multiple back-end compilers, and other verification tools.\n<https://copilot-language.github.io/>";
      buildType = "Simple";
    };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."sketch-frp-copilot" or (errorHandler.buildDepError "sketch-frp-copilot"))
          (hsPkgs."copilot" or (errorHandler.buildDepError "copilot"))
          (hsPkgs."copilot-c99" or (errorHandler.buildDepError "copilot-c99"))
          (hsPkgs."copilot-language" or (errorHandler.buildDepError "copilot-language"))
          (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
          (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
          (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
          (hsPkgs."temporary" or (errorHandler.buildDepError "temporary"))
          (hsPkgs."optparse-applicative" or (errorHandler.buildDepError "optparse-applicative"))
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
        ];
        buildable = true;
      };
      tests = {
        "test" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."arduino-copilot" or (errorHandler.buildDepError "arduino-copilot"))
            (hsPkgs."temporary" or (errorHandler.buildDepError "temporary"))
            (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
            (hsPkgs."process" or (errorHandler.buildDepError "process"))
          ];
          buildable = true;
        };
      };
    };
  }