{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  {
    flags = {};
    package = {
      specVersion = "2.2";
      identifier = { name = "copilot-verifier"; version = "4.2"; };
      license = "BSD-3-Clause";
      copyright = "(c) Galois, Inc 2021-2024";
      maintainer = "rscott@galois.com";
      author = "Galois Inc.";
      homepage = "";
      url = "";
      synopsis = "System for verifying the correctness of generated Copilot programs";
      description = "@copilot-verifier@ is an add-on to the [Copilot Stream\nDSL](https://copilot-language.github.io) for verifying the correctness of C\ncode generated by the @copilot-c99@ package.\n\n@copilot-verifier@ uses the [Crucible symbolic\nsimulator](https://github.com/galoisinc/crucible) to interpret the semantics\nof the generated C program and and to produce verification conditions\nsufficient to guarantee that the meaning of the generated program corresponds\nin a precise way to the meaning of the original stream specification. The\ngenerated verification conditions are then dispatched to SMT solvers to be\nautomatically solved.";
      buildType = "Simple";
    };
    components = {
      "library" = {
        depends = [
          (hsPkgs."aeson" or (errorHandler.buildDepError "aeson"))
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."bv-sized" or (errorHandler.buildDepError "bv-sized"))
          (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
          (hsPkgs."copilot-c99" or (errorHandler.buildDepError "copilot-c99"))
          (hsPkgs."copilot-core" or (errorHandler.buildDepError "copilot-core"))
          (hsPkgs."copilot-theorem" or (errorHandler.buildDepError "copilot-theorem"))
          (hsPkgs."crucible" or (errorHandler.buildDepError "crucible"))
          (hsPkgs."crucible-llvm" or (errorHandler.buildDepError "crucible-llvm"))
          (hsPkgs."crux" or (errorHandler.buildDepError "crux"))
          (hsPkgs."crux-llvm" or (errorHandler.buildDepError "crux-llvm"))
          (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
          (hsPkgs."lens" or (errorHandler.buildDepError "lens"))
          (hsPkgs."llvm-pretty" or (errorHandler.buildDepError "llvm-pretty"))
          (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
          (hsPkgs."panic" or (errorHandler.buildDepError "panic"))
          (hsPkgs."parameterized-utils" or (errorHandler.buildDepError "parameterized-utils"))
          (hsPkgs."prettyprinter" or (errorHandler.buildDepError "prettyprinter"))
          (hsPkgs."text" or (errorHandler.buildDepError "text"))
          (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
          (hsPkgs."vector" or (errorHandler.buildDepError "vector"))
          (hsPkgs."what4" or (errorHandler.buildDepError "what4"))
        ];
        buildable = true;
      };
      sublibs = {
        "copilot-verifier-examples" = {
          depends = [
            (hsPkgs."aeson" or (errorHandler.buildDepError "aeson"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."bv-sized" or (errorHandler.buildDepError "bv-sized"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
            (hsPkgs."copilot-c99" or (errorHandler.buildDepError "copilot-c99"))
            (hsPkgs."copilot-core" or (errorHandler.buildDepError "copilot-core"))
            (hsPkgs."copilot-theorem" or (errorHandler.buildDepError "copilot-theorem"))
            (hsPkgs."crucible" or (errorHandler.buildDepError "crucible"))
            (hsPkgs."crucible-llvm" or (errorHandler.buildDepError "crucible-llvm"))
            (hsPkgs."crux" or (errorHandler.buildDepError "crux"))
            (hsPkgs."crux-llvm" or (errorHandler.buildDepError "crux-llvm"))
            (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
            (hsPkgs."lens" or (errorHandler.buildDepError "lens"))
            (hsPkgs."llvm-pretty" or (errorHandler.buildDepError "llvm-pretty"))
            (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
            (hsPkgs."panic" or (errorHandler.buildDepError "panic"))
            (hsPkgs."parameterized-utils" or (errorHandler.buildDepError "parameterized-utils"))
            (hsPkgs."prettyprinter" or (errorHandler.buildDepError "prettyprinter"))
            (hsPkgs."text" or (errorHandler.buildDepError "text"))
            (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
            (hsPkgs."vector" or (errorHandler.buildDepError "vector"))
            (hsPkgs."what4" or (errorHandler.buildDepError "what4"))
            (hsPkgs."case-insensitive" or (errorHandler.buildDepError "case-insensitive"))
            (hsPkgs."copilot" or (errorHandler.buildDepError "copilot"))
            (hsPkgs."copilot-language" or (errorHandler.buildDepError "copilot-language"))
            (hsPkgs."copilot-prettyprinter" or (errorHandler.buildDepError "copilot-prettyprinter"))
            (hsPkgs."copilot-verifier" or (errorHandler.buildDepError "copilot-verifier"))
          ];
          buildable = true;
        };
      };
      exes = {
        "verify-examples" = {
          depends = [
            (hsPkgs."aeson" or (errorHandler.buildDepError "aeson"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."bv-sized" or (errorHandler.buildDepError "bv-sized"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
            (hsPkgs."copilot-c99" or (errorHandler.buildDepError "copilot-c99"))
            (hsPkgs."copilot-core" or (errorHandler.buildDepError "copilot-core"))
            (hsPkgs."copilot-theorem" or (errorHandler.buildDepError "copilot-theorem"))
            (hsPkgs."crucible" or (errorHandler.buildDepError "crucible"))
            (hsPkgs."crucible-llvm" or (errorHandler.buildDepError "crucible-llvm"))
            (hsPkgs."crux" or (errorHandler.buildDepError "crux"))
            (hsPkgs."crux-llvm" or (errorHandler.buildDepError "crux-llvm"))
            (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
            (hsPkgs."lens" or (errorHandler.buildDepError "lens"))
            (hsPkgs."llvm-pretty" or (errorHandler.buildDepError "llvm-pretty"))
            (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
            (hsPkgs."panic" or (errorHandler.buildDepError "panic"))
            (hsPkgs."parameterized-utils" or (errorHandler.buildDepError "parameterized-utils"))
            (hsPkgs."prettyprinter" or (errorHandler.buildDepError "prettyprinter"))
            (hsPkgs."text" or (errorHandler.buildDepError "text"))
            (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
            (hsPkgs."vector" or (errorHandler.buildDepError "vector"))
            (hsPkgs."what4" or (errorHandler.buildDepError "what4"))
            (hsPkgs."case-insensitive" or (errorHandler.buildDepError "case-insensitive"))
            (hsPkgs."copilot-verifier" or (errorHandler.buildDepError "copilot-verifier"))
            (hsPkgs."copilot-verifier".components.sublibs.copilot-verifier-examples or (errorHandler.buildDepError "copilot-verifier:copilot-verifier-examples"))
            (hsPkgs."optparse-applicative" or (errorHandler.buildDepError "optparse-applicative"))
          ];
          buildable = true;
        };
      };
      tests = {
        "copilot-verifier-test" = {
          depends = [
            (hsPkgs."aeson" or (errorHandler.buildDepError "aeson"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."bv-sized" or (errorHandler.buildDepError "bv-sized"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
            (hsPkgs."copilot-c99" or (errorHandler.buildDepError "copilot-c99"))
            (hsPkgs."copilot-core" or (errorHandler.buildDepError "copilot-core"))
            (hsPkgs."copilot-theorem" or (errorHandler.buildDepError "copilot-theorem"))
            (hsPkgs."crucible" or (errorHandler.buildDepError "crucible"))
            (hsPkgs."crucible-llvm" or (errorHandler.buildDepError "crucible-llvm"))
            (hsPkgs."crux" or (errorHandler.buildDepError "crux"))
            (hsPkgs."crux-llvm" or (errorHandler.buildDepError "crux-llvm"))
            (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
            (hsPkgs."lens" or (errorHandler.buildDepError "lens"))
            (hsPkgs."llvm-pretty" or (errorHandler.buildDepError "llvm-pretty"))
            (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
            (hsPkgs."panic" or (errorHandler.buildDepError "panic"))
            (hsPkgs."parameterized-utils" or (errorHandler.buildDepError "parameterized-utils"))
            (hsPkgs."prettyprinter" or (errorHandler.buildDepError "prettyprinter"))
            (hsPkgs."text" or (errorHandler.buildDepError "text"))
            (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
            (hsPkgs."vector" or (errorHandler.buildDepError "vector"))
            (hsPkgs."what4" or (errorHandler.buildDepError "what4"))
            (hsPkgs."case-insensitive" or (errorHandler.buildDepError "case-insensitive"))
            (hsPkgs."copilot-verifier" or (errorHandler.buildDepError "copilot-verifier"))
            (hsPkgs."copilot-verifier".components.sublibs.copilot-verifier-examples or (errorHandler.buildDepError "copilot-verifier:copilot-verifier-examples"))
            (hsPkgs."silently" or (errorHandler.buildDepError "silently"))
            (hsPkgs."tasty" or (errorHandler.buildDepError "tasty"))
            (hsPkgs."tasty-expected-failure" or (errorHandler.buildDepError "tasty-expected-failure"))
            (hsPkgs."tasty-hunit" or (errorHandler.buildDepError "tasty-hunit"))
          ];
          buildable = true;
        };
      };
    };
  }